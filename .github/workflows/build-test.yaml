name: Build and test FreeIPA containers

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '15 4 * * 1,3,5'

env:
  TRAVIS: yes-similar-ubuntu-environment
jobs:
  build:
    name: Build image
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        os: [ fedora-rawhide, fedora-33, fedora-32, fedora-23, centos-7 ]
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build -t local/freeipa-server:${{ matrix.os }} -f Dockerfile.${{ matrix.os }} .
      - name: File issue if building image failed
        if: ${{ failure() && github.event_name == 'schedule' }}
        run: |
          curl -s 'https://api.github.com/repos/${{ github.repository }}/issues?labels=image-build-fail' | jq -r '.[0].state' | grep open \
          || curl -s -X POST \
            --url https://api.github.com/repos/${{ github.repository }}/issues \
            -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'Accept: application/vnd.github.v3+json' \
            -d '{
              "title": "Image build for ${{ matrix.os }} failed on '$( date -I )'",
              "body": "This issue was automatically created by GitHub Action\n\nhttps://github.com/adelton/freeipa-container/actions/runs/${{ github.run_id }}.\n",
              "labels": ["image-build-fail" ]
              }'
      - name: Create directory for artifacts
        run: mkdir freeipa-server-${{ matrix.os }}
      - name: Save image
        run: docker save local/freeipa-server:${{ matrix.os }} | gzip > freeipa-server-${{ matrix.os }}/freeipa-server-${{ matrix.os }}.tar.gz
      - name: Get FreeIPA version
        run: docker run --rm --entrypoint rpm local/freeipa-server:${{ matrix.os }} -qf --qf '%{version}\n' /usr/sbin/ipa-server-install > freeipa-server-${{ matrix.os }}/freeipa-server-${{ matrix.os }}.version
      - uses: actions/upload-artifact@v2
        with:
          name: freeipa-server-${{ matrix.os }}
          path: freeipa-server-${{ matrix.os }}

  test-docker:
    name: Run with docker
    runs-on: ubuntu-20.04
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: fedora-33
          - os: fedora-33
            readonly: --read-only
          - os: fedora-33
            readonly: --read-only
            ca: --external-ca
          - os: centos-7
            protected_regular: unset
        os: [ fedora-32 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-${{ matrix.os }}
      - name: Load image
        run: gunzip < freeipa-server-${{ matrix.os }}.tar.gz | docker load
      - name: Install certutil
        if: ${{ matrix.ca == '--external-ca' }}
        run: sudo apt-get update -y && sudo apt-get install -y libnss3-tools
      - name: Disable fs.protected_regular
        if: ${{ matrix.protected_regular == 'unset' }}
        run: sudo sysctl fs.protected_regular=0
      - name: Run master and replica
        run: readonly=${{ matrix.readonly }} ca=${{ matrix.ca }} seccomp=${{ matrix.seccomp }} replica=${{ matrix.replica }} tests/run-master-and-replica.sh local/freeipa-server:${{ matrix.os }}
      - name: Run partial tests
        if: ${{ failure() }}
        run: tests/run-partial-tests.sh Dockerfile.${{ matrix.os }}

  test-docker-fedora-23:
    name: Run with docker
    runs-on: ubuntu-18.04
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: fedora-23
            readonly: --read-only
            seccomp: unconfined
            replica: none
            protected_regular: unset
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-${{ matrix.os }}
      - name: Load image
        run: gunzip < freeipa-server-${{ matrix.os }}.tar.gz | docker load
      - name: Disable fs.protected_regular
        if: ${{ matrix.protected_regular == 'unset' }}
        run: sudo sysctl fs.protected_regular=0
      - name: Run master
        run: readonly=${{ matrix.readonly }} seccomp=${{ matrix.seccomp }} replica=${{ matrix.replica }} tests/run-master-and-replica.sh local/freeipa-server:${{ matrix.os }}
      - name: Run partial tests
        if: ${{ failure() }}
        run: tests/run-partial-tests.sh Dockerfile.${{ matrix.os }}

  test-podman:
    name: Run with sudo podman
    runs-on: ubuntu-20.04
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        os: [ fedora-33 ]
    steps:
      - name: Install podman
        run: . /etc/os-release && echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcont ainers:stable.list && curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add - && sudo apt-get update -y && sudo apt-get install -y podman
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-${{ matrix.os }}
      - name: Load image
        run: gunzip < freeipa-server-${{ matrix.os }}.tar.gz | sudo podman load
      - name: Run master and replica
        run: docker='sudo podman' tests/run-master-and-replica.sh local/freeipa-server:${{ matrix.os }}
      - name: Run partial tests
        if: ${{ failure() }}
        run: docker='sudo podman' tests/run-partial-tests.sh Dockerfile.${{ matrix.os }}

  test-rootless-podman:
    name: Run with rootless podman
    runs-on: ubuntu-20.04
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        os: [ fedora-33 ]
    steps:
      - name: Install podman and others
        run: . /etc/os-release && echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcont ainers:stable.list && curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add - && sudo apt-get update -y && sudo apt-get install -y podman fuse-overlayfs uidmap slirp4netns
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-${{ matrix.os }}
      - name: Load image
        run: gunzip < freeipa-server-${{ matrix.os }}.tar.gz | podman load
      - name: Enable ssh access to self
        run: ssh-keygen -f ~/.ssh/id_rsa && cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys && chmod 400 ~/.ssh/authorized_keys && chmod o-w ~
      - name: Run master
        shell: ssh -o StrictHostKeyChecking=no localhost bash {0}
        run: cd ${{ github.workspace }} && docker=podman replica=none tests/run-master-and-replica.sh local/freeipa-server:${{ matrix.os }} && podman ps -aq | xargs podman rm -f
      - name: Run partial tests
        if: ${{ failure() }}
        shell: ssh localhost bash {0}
        run: cd ${{ github.workspace }} && docker=podman tests/run-partial-tests.sh Dockerfile.${{ matrix.os }}

  test-upgrade:
    name: Upgrade from older version or build
    runs-on: ubuntu-20.04
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: fedora-33
            data-from: fedora-32
          - os: fedora-33
            data-from: fedora-31
          - os: fedora-32
            data-from: fedora-31
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-${{ matrix.os }}
      - name: Load image
        run: gunzip < freeipa-server-${{ matrix.os }}.tar.gz | docker load
      - name: Populate volume with data
        run: docker volume create loaded-data && docker create --name loaded-data -v loaded-data:/data:z docker.io/freeipa/freeipa-server:data-${{ matrix.data-from }} noop && mkdir /tmp/freeipa-data && docker run --volumes-from loaded-data -v /tmp/freeipa-data:/data-out:z --rm docker.io/library/busybox sh -c 'cd /data && cp -a . /data-out'
      - name: Run master and replica
        run: VOLUME=/tmp/freeipa-data replica=none tests/run-master-and-replica.sh local/freeipa-server:${{ matrix.os }}

  test-k3s:
    name: Run with K3s
    runs-on: ubuntu-20.04
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        os: [ fedora-33 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-${{ matrix.os }}
      - name: Unzip the image
        run: gunzip freeipa-server-${{ matrix.os }}.tar.gz
      - name: Run K3s and master in it
        run: tests/run-master-in-k3s.sh local/freeipa-server:${{ matrix.os }} freeipa-server-${{ matrix.os }}.tar

  push-after-success:
    name: Push images to Registry
    runs-on: ubuntu-20.04
    needs: [ test-docker, test-podman, test-rootless-podman, test-upgrade, test-k3s ]
    if: github.event_name != 'pull_request' && ( ( github.repository == 'freeipa/freeipa-container' && github.ref == 'refs/heads/master' ) || github.repository != 'freeipa/freeipa-container' )
    env:
      DOCKER_IMAGE_BASE: ${{ secrets.DOCKER_IMAGE_BASE }}
    steps:
      - name: Log in to the registry
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          [ "${DOCKER_IMAGE_BASE}" == "" ] && echo "ERROR: DOCKER_IMAGE_BASE is empty" && exit 2
          [ "${DOCKER_USERNAME}" == "" ] && echo "ERROR: DOCKER_USERNAME is empty" && exit 2
          [ "${DOCKER_PASSWORD}" == "" ] && echo "ERROR: DOCKER_PASSWORD is empty" && exit 2
          DOCKER_SERVER="${DOCKER_IMAGE_BASE%%/*}"
          echo "$DOCKER_PASSWORD" | skopeo login --authfile=auth.json -u "$DOCKER_USERNAME" --password-stdin "${DOCKER_SERVER}"
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-fedora-33
      - name: Push Fedora 33 image to the registry
        run: skopeo copy --authfile=auth.json docker-archive:freeipa-server-fedora-33.tar.gz docker://${DOCKER_IMAGE_BASE}:fedora-33
      - name: Push Fedora 33 image tagged with FreeIPA version to the registry
        run: skopeo copy --authfile=auth.json docker-archive:freeipa-server-fedora-33.tar.gz docker://${DOCKER_IMAGE_BASE}:fedora-33-$( cat freeipa-server-fedora-33.version )
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-fedora-32
      - name: Push Fedora 32 image to the registry
        run: skopeo copy --authfile=auth.json docker-archive:freeipa-server-fedora-32.tar.gz docker://${DOCKER_IMAGE_BASE}:fedora-32
      - name: Push Fedora 32 image tagged with FreeIPA version to the registry
        run: skopeo copy --authfile=auth.json docker-archive:freeipa-server-fedora-32.tar.gz docker://${DOCKER_IMAGE_BASE}:fedora-32-$( cat freeipa-server-fedora-32.version )
      - uses: actions/download-artifact@v2
        with:
          name: freeipa-server-centos-7
      - name: Push CentOS 7 image to the registry
        run: skopeo copy --authfile=auth.json docker-archive:freeipa-server-centos-7.tar.gz docker://${DOCKER_IMAGE_BASE}:centos-7
      - name: Push CentOS 7 image tagged with FreeIPA version to the registry
        run: skopeo copy --authfile=auth.json docker-archive:freeipa-server-centos-7.tar.gz docker://${DOCKER_IMAGE_BASE}:centos-7-$( cat freeipa-server-centos-7.version )

